{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

forall X -> int is_null (X x) asm "ISNULL";
forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";

forall X -> () print (X x) impure { ~dump(x); }

const inf = (1 << 128);

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  shift %= 26;

  tuple stack = null();

  slice stext = text.begin_parse();
  (int text_recursive_refs, _, _) = text.compute_data_size(inf);

  int mask = 0;
  int i = 0;
  repeat(256 / 8) {
    mask |= (1 << (i * 8));
    i += 1;
  }

  repeat(text_recursive_refs) {
    builder answer = begin_cell();
    repeat(stext.slice_bits() ^/ 256) {
      int chunk_bits = min(256, stext.slice_bits());
      int chunk = stext~load_uint(chunk_bits);

      int s0 = chunk & mask;
      int s1 = (chunk & (mask << 1)) >> 1;
      int s2 = (chunk & (mask << 2)) >> 2;
      int s3 = (chunk & (mask << 3)) >> 3;
      int s4 = (chunk & (mask << 4)) >> 4;
      int s5 = (chunk & (mask << 5)) >> 5;
      int s6 = (chunk & (mask << 6)) >> 6;
      int s7 = (chunk & (mask << 7)) >> 7;

      int is_letter? = (~ s7) & s6 & (s4 | s3 | s2 | s1 | s0) & (~ (s4 & s3 & (s2 | (s1 & s0))));

      chunk += is_letter? * shift;

      int s0 = chunk & mask;
      int s1 = (chunk & (mask << 1)) >> 1;
      int s2 = (chunk & (mask << 2)) >> 2;
      int s3 = (chunk & (mask << 3)) >> 3;
      int s4 = (chunk & (mask << 4)) >> 4;
      int s5_after = (chunk & (mask << 5)) >> 5;
      int s6 = (chunk & (mask << 6)) >> 6;
      int s7 = (chunk & (mask << 7)) >> 7;

      int is_letter_after? = (~ s7) & s6 & (s4 | s3 | s2 | s1 | s0) & (~ (s4 & s3 & (s2 | (s1 & s0))));

      chunk -= ((is_letter? ^ is_letter_after?) | ((is_letter? & s5) ^ (is_letter_after? & s5_after))) * 26;

      answer~store_uint(chunk, chunk_bits);
    }

    stack~push_back(answer);
    
    if(stext.slice_refs()) {
      stext = stext~load_ref().begin_parse();
    }
  }

  cell answer = stack~pop_back().end_cell();
  while(~ stack.is_null()) {
    builder tb = stack~pop_back();
    answer = tb.store_ref(answer).end_cell();
  }

  return answer;
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return caesar_cipher_encrypt(- shift, text);
}


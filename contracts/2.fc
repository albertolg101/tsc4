{-
  TASK 2 - Matrix multiplier
  Write the method that multiplies one matrix by another.
  The 1st and 2nd parameter of the function will contain
  a matrix implemented using tuples (eg: [[1,2], [3,4]]).
  Matrices can be of different sizes, ranging from 4x4
  up to 32x32.
  Matrix can be rectangular where matrixA must to be of size n*m & matrixB of size m*p.
  After calculating the result matrix, the function should return final result (as tuple).
-}
(int) tlen (tuple t) asm "TLEN";
forall X -> (tuple, ()) ~tpush(tuple t, X value) asm "TPUSH";
forall X -> (tuple) to_tuple (X x) asm "NOP";

() recv_internal() {
}

;; testable
;; (tuple) matrix_multiplier() method_id {
;;   tuple matrixA = to_tuple([
;;     to_tuple([1, 0, 1]), 
;;     to_tuple([2, 1, 1]), 
;;     to_tuple([0, 1, 1]), 
;;     to_tuple([1, 1, 2])
;;   ]);
;;   tuple matrixB = to_tuple([
;;     to_tuple([1, 2, 1]), 
;;     to_tuple([2, 3, 1]), 
;;     to_tuple([4, 2, 2])
;;   ]);
(tuple) matrix_multiplier(tuple matrixA, tuple matrixB) method_id {
  int n = matrixA.tlen();
  int m = matrixB.tlen();
  int p = matrixB.at(0).tlen();

  tuple ans = empty_tuple();
  
  (int i, int j, int k) = (0, 0, 0);

  while(i < n) {
    j = 0;
    tuple line = empty_tuple();
    while(j < p) {
      int point = 0;
      k = 0;
      while(k < m) {
        point += matrixA.at(i).at(k) * matrixB.at(k).at(j);
        k += 1;
      }
      line~tpush(point);
      j += 1;
    }
    ans~tpush(line);
    i += 1;
  }

  return ans;
}


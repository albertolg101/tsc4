{-
  TASK 1 - Find branch of the cell tree
  Write the method that will find a branch of the tree by comparing its
  hash with the hash received in the first parameter. When the algorithm finds
  the subtree (branch) whose hash equals the received hash, the root cell of
  this branch should be returned. Return empty cell if the branch is not found.
-}
;; forall X -> int is_null (X x) asm "ISNULL";
;; forall X -> (tuple, ()) push_back (tuple tail, X head) asm "CONS";
;; forall X -> (tuple, (X)) pop_back (tuple t) asm "UNCONS";

int cell_hash(cell c) asm "HASHCU";

() recv_internal() {
}

(cell) f (cell tree, int hash) asm """
1 SETGLOB
WHILE:<{
    DUP HASHCU 1 GETGLOB NEQ
}>DO<{
    CTOS
    DUP SREFS REPEAT:<{
        LDREF
    }>
    DROP

    DEPTH IFNOT:<{
        NEWC ENDC DUP HASHCU 1 SETGLOB
    }>
}>
1 INT ONLYTOPX
""";

;; testable
(cell) find_branch_by_hash(int hash, cell tree) method_id {
    ;; ~dump(begin_cell().end_cell().cell_hash());
    return f(tree, hash);
    ;; ~dump(f(tree, hash));
    ;; return begin_cell().end_cell();

    ;; tuple stack = null();
    ;; stack~push_back(tree);

    ;; ;; while stack is not null
    ;; while ((~ stack.is_null())) {
    ;;     cell c = stack~pop_back();
        
    ;;     if(c.cell_hash() == hash) {
    ;;         return c;
    ;;     }

    ;;     slice s = c.begin_parse();

    ;;     repeat (s.slice_refs()) {
    ;;         stack~push_back(s~load_ref());
    ;;     }
    ;; }

    ;; return begin_cell().end_cell();
}

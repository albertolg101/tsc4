{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=370; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

forall X -> (tuple, ()) ~tpush(tuple t, X value) asm "TPUSH";
  
;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {
;; (tuple) fibonacci_sequence () method_id {
;;    (int n, int k) = (0, 5);
    tuple ans = empty_tuple();

    if(k == 0) {
        return ans;
    }

    int fib_a = -1;
    int fib_b = 1;

    repeat(n) {
        (fib_a, fib_b) = (fib_b, fib_a + fib_b);
    }

    repeat(k) {
        (fib_a, fib_b) = (fib_b, fib_a + fib_b);
        ans~tpush(fib_b);
    }


    return ans;
}

{-
1 -1
0 1
1 0
1 1
-}
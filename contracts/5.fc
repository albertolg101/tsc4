{-
  TASK 5 - Fibonacci sequence
  Implement a function that generates the Fibonacci
  sequence from N to N+K terms (0<=N<=370; 0<=N+K<=370; 0<=K<=255).
  The first two terms of the Fibonacci sequence are F_0 = 0 and F_1 = 1,
  and the rest are defined as F_n = F_(n-1) + F_(n-2).
  The resulting Fibonacci sequence should be stored in a tuple.
  For example, a request with N = 1 and K = 3 should return a tuple [1, 1, 2],
  and a request with N = 201 and K = 4 should return a tuple
  [453973694165307953197296969697410619233826,
  734544867157818093234908902110449296423351,
  1188518561323126046432205871807859915657177,
  1923063428480944139667114773918309212080528]
-}

() recv_internal() {
}

(int) ubitsize(int value) asm "UBITSIZE";
forall X -> (tuple, ()) ~tpush(tuple t, X value) asm "TPUSH";

(tuple) f (int n, int k) inline asm """
-1 INT 1 INT
1 3 BLKSWAP
REPEAT:<{
    TUCK ADD
}>
ROT DUP
REPEAT:<{
    s1 s2 PUSH2 ADD SWAP
}>
TUPLEVAR
ROTREV DROP2
""";
  
;; testable
(tuple) fibonacci_sequence (int n, int k) method_id {

    if(k == 0) {
        return empty_tuple();
    }

    return f(n, k);

    ;; int fib_n = 0;
    ;; int fib_n+1 = 1;

    ;; int mask = (1 << ubitsize(n)) / 2;

    ;; repeat(ubitsize(n)) {
    ;;     (fib_n, fib_n+1) = (
    ;;         fib_n * ((fib_n+1 << 1) - fib_n),
    ;;         fib_n * fib_n + fib_n+1 * fib_n+1
    ;;     );

    ;;     if(n & mask) {
    ;;         (fib_n, fib_n+1) = (fib_n+1, fib_n + fib_n+1);
    ;;     }

    ;;     mask >>= 1;
    ;; }

    ;; tuple ans = empty_tuple();
    
    ;; (fib_n, fib_n+1) = (fib_n+1 - fib_n, fib_n);
    ;; (fib_n, fib_n+1) = (fib_n+1 - fib_n, fib_n);

    ;; repeat(k) {
    ;;     (fib_n, fib_n+1) = (fib_n+1, fib_n + fib_n+1);
    ;;     ans~tpush(fib_n+1);
    ;; }

    ;; return ans;
}

{-
1 -1
0 1
1 0
1 1
-}